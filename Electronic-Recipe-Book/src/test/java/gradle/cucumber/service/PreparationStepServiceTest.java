
/*
 * Copyright (c) 2020. University of Canterbury
 *
 * This file is part of SENG301 lab material.
 *
 *  The lab material is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published
 *  by the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  The lab material is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this material.  If not, see <https://www.gnu.org/licenses/>.
 */

/*
 * This Java source file was generated by the Gradle 'init' task.
 */

package gradle.cucumber.asg1.service;
import org.junit.Test;


import uc.seng301.asg1.entity.PreparationStep;
import uc.seng301.asg1.service.IngredientService;
import uc.seng301.asg1.service.PreparationStepService;

import static org.junit.Assert.*;

import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;
import org.junit.BeforeClass;
import uc.seng301.asg1.service.RecipeService;

import java.util.ArrayList;
import java.util.List;

public class PreparationStepServiceTest {

    private static SessionFactory factory;
    private static PreparationStepService service;
    private static RecipeService rService;
    private static IngredientService iService;
    private static String rName;
    private static String iName;
    private static String stepDescription;
    private static String expectedDescription;
    private static String expectedSummary;
    private static Short stepNumber;
    private static int recipeId;
    private static int ingredientId;

    @BeforeClass
    public static void init() {
        // see test/resource file that is using an embedded H2 database (see https://www.h2database.com/html/main.html)
        // with this h2 database, you are not using the sqlite file and therefore can create self-contained tests
        // you can simply create a test-dedicated environment by putting test resources under the test folder
        Configuration configuration = new Configuration();
        configuration.configure();
        factory = configuration.buildSessionFactory();
        service = new PreparationStepService(factory);
        rService = new RecipeService(factory);
        iService = new IngredientService(factory);

        rName = "tiramisu";
        iName = "flour";
        stepDescription = "Get 1 cup of flour";
        expectedDescription = "Preparation step with ID 3: Get 1 cup of flour with ingredients: flour";
        expectedSummary = "Recipe ID: 1\n" +
                "1. Get 1 cup of flour";
        stepNumber = 1;

        recipeId = rService.addRecipe(rName);
        ingredientId = iService.addIngredient(iName);

        List<Integer> ingredientIds = new ArrayList();
        ingredientIds.add(ingredientId);



        service.addPreparationStep(recipeId, stepDescription, ingredientIds, stepNumber);
    }

    /**
     * Tests that the right preparation steps are returned for a specific recipe using the recipe id
     */
    @Test
    public void testGetPreparationStepsByRecipeId() {
        List<PreparationStep> preparationSteps = service.getPreparationStepsByRecipeId((short) recipeId);
        PreparationStep result = preparationSteps.get(0);
        assertEquals(result.toString(), expectedDescription);
    }

    /**
     * Tests that the recipe summary is returned correctly for a specific recipe using the recipe id
     */
    @Test
    public void testGetRecipeSummary() {
        List<Short> recipeIds = new ArrayList();
        recipeIds.add((short) recipeId);
        String result = service.getRecipeSummary(recipeIds);
        assertEquals(result.trim(), expectedSummary);
    }
}
