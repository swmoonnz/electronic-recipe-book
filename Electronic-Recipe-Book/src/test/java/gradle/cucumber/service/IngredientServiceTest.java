
/*
 * Copyright (c) 2020. University of Canterbury
 *
 * This file is part of SENG301 lab material.
 *
 *  The lab material is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published
 *  by the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  The lab material is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this material.  If not, see <https://www.gnu.org/licenses/>.
 */

/*
 * This Java source file was generated by the Gradle 'init' task.
 */

package gradle.cucumber.asg1.service;
import org.junit.Test;

import uc.seng301.asg1.service.IngredientService;

import static org.junit.Assert.*;

import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;
import org.junit.BeforeClass;

public class IngredientServiceTest {

    private static SessionFactory factory;
    private static IngredientService service;

    @BeforeClass
    public static void init() {
        // see test/resource file that is using an embedded H2 database (see https://www.h2database.com/html/main.html)
        // with this h2 database, you are not using the sqlite file and therefore can create self-contained tests
        // you can simply create a test-dedicated environment by putting test resources under the test folder
        Configuration configuration = new Configuration();
        configuration.configure();
        factory = configuration.buildSessionFactory();
        service = new IngredientService(factory);
    }

    /**
     * Test to check when going through return or add validation, it adds a new ingredient
     */
    @Test
    public void testAddIngredientForNewIngredient() {
        String name = "carrot";
        int result = service.returnOrAddIngredient(name);
        assertEquals(result, 1);
    }

    /**
     * Test to check it does not add an existing ingredient, and returns the existing ingredient
     */
    @Test
    public void testReturnOrAddIngredientForExistingIngredient() {
        String name = "carrot";
        String name1 = "carrot";
        service.returnOrAddIngredient(name);
        int result = service.returnOrAddIngredient(name1);
        assertEquals(result, 1);
    }

    /**
     * Test to check valid ingredient ingredients are recognized as valid
     */
    @Test
    public void testIngredientNameIsValid() {
        String name = "carrot";
        assertTrue(service.isOneIngredientNameValid(name));
    }

    /**
     * Test to check invalid ingredient ingredients are recognized as invalid
     */
    @Test
    public void testIngredientNameIsInvalid() {
        String name = "ca123";
        assertFalse(service.isOneIngredientNameValid(name));
    }

    /**
     * Test to check given valid ingredients are recognized as valid format
     */
    @Test
    public void testIngredientNamesAreValid() {
        String names = "carrot, egg, banana";
        assertTrue(service.ingredientNameIsValidForNames(names));
    }

    /**
     * Test to check given invalid ingredients are recognized as invalid format
     */
    @Test
    public void testIngredientNamesAreInvalid() {
        String names = "carrot, 3gg, h4m";
        assertFalse(service.ingredientNameIsValidForNames(names));
    }

}
